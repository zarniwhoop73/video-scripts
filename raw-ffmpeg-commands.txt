My cheat-sheet for raw ffmpeg commands.

1. Extracting the first (or last) frame(s) to a png.

 I wanted to try extracting the last frame from what would be the final clip,
to get a png to which I could add a caption saying "The End" using the gimp.

 The following command does not exactly do that - if I've got it right, it
averages the last three frames (30 fps, so 1/10th second is 3 frames) :

ffmpeg -i infile.mov -r 1/10 -ss 0:01:13.9 -t 0.1 -f image2 end%d.png

 This was a .mov file : according to ffprobe, every frame is a keyframe
(unlike x264 where keyframes seem to only be on every 250th frame).  I think
that ffmpeg's  -ss setting ought to be reliable in this situation.  My camera's
mov files all seem to have lengths in either whole seconds or half seconds.
In this case, the file was 1m14 long.

 That created exactly one file, end1.png.  I guess that if you wished, you could
extract individual frames using a rate of 1/30, but with that approach you will
quickly need to switch to something like filename%03d.png for up to 33 seconds,
or bigger numbers for longer clips - that would use a lot more storage.

 After that, edit the png in the gimp to add the required text, and then use
video-slide.sh to create the mkv.

 Similar commands can also be used at the start of a clip, to extract the
beginning.


2. Cutting a clip into parts.

 I started out using the -ss and -t parameters in ffmpeg, and transferred those
to start= time= when I wrote the first script.  But as I noted above, my input
files are all .mov where every frame is a key frame, so it is sometimes more
convenient to copy a clip into multiple parts, e.g. it lets me determine the
number of frames with certainty (for setting vfo= values), and now that I have
decided to put captions on some clips (text=) it allows me to put the part with
a caption into a separate file, because the drawtext filter writes to the whole
output file.

  ffmpeg -i original.mov -ss start-offset -t duration -c copy -y newname.mov


